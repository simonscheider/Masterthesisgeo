library(dplyr)
library(readr)
# for visualising raw imported data and putting it into another excel sheet to use for analysis
rawresults <- read.csv("raw_survey_data.csv", header = T, sep = ",", quote = "\"")
age.gender <- rawresults[, c(9,981,982)]
# load data with the correct format for analysis, that we manually crafter with the previous code
d <- read.csv("survey.data.final.csv", header=T, sep = ";", quote = "\"")
d[d == -99 ] <- NA
age.gender <- age.gender %>%
rename(
ResponseID = ResponseId,  # Assuming the original column name is 'ID'
age = Q2.2,        # Assuming the original column name is 'Age'
gender = Q2.3   # Assuming the original column name is 'Gender'
)
#  Extract unique ResponseIDs from dataset `d`
unique_responses <- d %>%
select(ResponseID) %>%
distinct()
# Merge unique responses with the age.gender dataframe
age.gender.respondents <- unique_responses %>%
inner_join(age.gender, by = "ResponseID")
# remove -99 responses ;
age.gender.respondents[age.gender.respondents == -99 ] <- NA
# there was someone that filled in 3 for age. We removed this
age.gender.respondents[age.gender.respondents == 3 ] <- NA
# median age
age.gender.respondents$age <- as.numeric(age.gender.respondents$age)
summary(age.gender.respondents$age, na.rm=T)
# how many male?
age.gender.respondents %>%
filter(gender == "Male") %>%
summarize(count = n())
# how many female?
age.gender.respondents %>%
filter(gender == "Female") %>%
summarize(count = n())
# how many did not want to disclose it?
age.gender.respondents %>%
filter(gender == "I don't want to disclose it") %>%
summarize(count = n())
# how many did not fill it out?
age.gender.respondents %>%
filter(gender == "") %>%
summarize(count = n())
# how many answers were rated
Amount.Questions <- d %>%
select(QuestionID) %>%
distinct()
print(Amount.Questions)
# how many ratings (since every answer is rated 3 times, we divide the nr of rows by 3)
nrow(d)/3
# load data
d <- read.csv("survey.data.final.csv", header=T, sep = ";", quote = "\"")
d[d == -99 ] <- NA
#d<-na.omit(d)
str(d)
str(d[Questontype =="direct"])
str(d[Questiontype =="direct"])
# load data
d <- read.csv("survey.data.final.csv", header=T, sep = ";", quote = "\"")
str(d)
str(d[Questiontype =="indirect"])
str(d[d.Questiontype =="indirect"])
str(d[d =="direct"])
direct <-d[d$Questiontype == "direct"]
direct <-d["Questiontype" == "direct"]
str(direct)
direct <-subset(d,Questiontype == "direct")
str(direct)
library(dplyr)
library(tidyr)
# load data
d <- read.csv("survey.data.final.csv", header=T, sep = ";", quote = "\"")
str(d)
d[d == -99 ] <- NA
#d<-na.omit(d)
# make the scores from Integer to Numeric
d$Correctness <- as.numeric(d$Correctness)
d$Relevance <- as.numeric(d$Relevance)
d$Clarity <- as.numeric(d$Clarity)
d$Completeness <- as.numeric(d$Completeness)
d$Transparency <- as.numeric(d$Transparency)
# make independent variables as factors
d$QuestionID <- factor(d$QuestionID)
d$Domain <- factor(d$Domain)
d$Subdomain <- factor(d$Subdomain, levels = c("urban geography", "economic geography", "ids", "geomorphology", "hydrology", "oceanography", ordered = TRUE))
d$Bloom <- factor(d$Bloom, levels = c("remember", "understand", "apply", "analyze", "evaluate", "create"), ordered = TRUE)
d$Questiontype <- factor(d$Questiontype)
d$Source <- factor(d$Source)
d$Complexity <- factor(d$Complexity)
# restrict the entire analysis to direct questions
d <-subset(d,Questiontype == "direct")
str(d)
# restrict the entire analysis to direct questions
d <-subset(d,Questiontype == "direct")
d
# Load necessary libraries
library(dplyr)
library(tidyr)
# Create a table with counts of each combination of Bloom and Subdomain, then divide counts by 3
bloom_subdomain_table <- d %>%
count(Bloom, Subdomain) %>%
mutate(n = n / 3) %>%  # Divide the counts by 3
# Spread the data to create a wide format table with Bloom levels as columns
pivot_wider(names_from = Bloom, values_from = n, values_fill = list(n = 0))
# Display the table
print(bloom_subdomain_table)
# Create a table with counts of each combination of Questiontype and Subdomain, then divide counts by 3
Questiontype_subdomain_table <- d %>%
count(Questiontype, Subdomain) %>%
mutate(n = n / 3) %>%  # Divide the counts by 3
# Spread the data to create a wide format table with Bloom levels as columns
pivot_wider(names_from = Questiontype, values_from = n, values_fill = list(n = 0))
# Display the table
print(Questiontype_subdomain_table)
